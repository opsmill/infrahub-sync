---
# yamllint disable rule:truthy rule:truthy rule:line-length
name: "Run linter"
on:
  workflow_call:
    inputs:
      runs-on:
        description: "The OS to run the job on"
        required: false
        default: "ubuntu-22.04"
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  VALE_VERSION: "3.7.1"

jobs:
  files-changed:
    name: Detect which file has changed
    runs-on: "ubuntu-22.04"
    timeout-minutes: 5
    outputs:
      python: ${{ steps.changes.outputs.python_all }}
      yaml: ${{ steps.changes.outputs.yaml_all }}
      documentation: ${{ steps.changes.outputs.documentation_all }}
      sync: ${{ steps.changes.outputs.sync_all }}
      github_workflows: ${{ steps.changes.outputs.github_workflows }}
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v5"
      - name: Check for file changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          token: ${{ github.token }}
          filters: .github/file-filters.yml

  yaml-lint:
    if: needs.files-changed.outputs.yaml == 'true'
    needs: ["files-changed"]
    runs-on: "ubuntu-22.04"
    timeout-minutes: 5
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v5"
      - name: "Setup environment"
        run: "pip install yamllint==1.35.1"
      - name: "Linting: yamllint"
        run: "yamllint -s ."

  python-lint:
    if: needs.files-changed.outputs.python == 'true'
    needs: ["files-changed"]
    runs-on: "ubuntu-22.04"
    strategy:
      matrix:
        python-version:
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
        poetry-version:
          - "2.1.3"
    timeout-minutes: 5
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v5"

      - name: "Set up Python ${{ matrix.python-version }}"
        uses: "actions/setup-python@v5"
        with:
          python-version: ${{ matrix.python-version }}
      - name: "Install Poetry ${{ matrix.poetry-version }}"
        uses: "snok/install-poetry@v1"
        with:
          version: ${{ matrix.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: "Setup Python environment"
        run: |
          poetry config virtualenvs.create true --local
          poetry env use ${{ matrix.python-version }}
      - name: "Install dependencies"
        run: "poetry install --no-interaction --no-ansi --with dev"
      - name: "Linting: ruff check"
        run: "poetry run ruff check ."
      - name: "Linting: ruff format"
        run: "poetry run ruff format --check --diff ."

      # TODO: Need to cleanup code
      # - name: "Mypy Tests"
      #   run: "poetry run mypy --show-error-codes infrahub_sync"
      # - name: "Pylint Tests"
      #   run: "poetry run pylint infrahub_sync/**/*.py"

  markdown-lint:
    if: needs.files-changed.outputs.documentation == 'true'
    needs: ["files-changed"]
    runs-on: "ubuntu-22.04"
    timeout-minutes: 5
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v5"
      - name: "Linting: markdownlint"
        uses: DavidAnson/markdownlint-cli2-action@v19
        with:
          config: .markdownlint.yml
          globs: |
            **/*.{md,mdx}
            !changelog/*.md

  action-lint:
    if: needs.files-changed.outputs.github_workflows == 'true'
    needs: ["files-changed"]
    runs-on: "ubuntu-22.04"
    timeout-minutes: 5
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v5"
      - name: Check workflow files
        run: |
          bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash)
          ./actionlint -color
        shell: bash
        env:
          SHELLCHECK_OPTS: --exclude=SC2086 --exclude=SC2046 --exclude=SC2004

  documentation:
    defaults:
      run:
        working-directory: ./docs
    if: |
      always() && !cancelled() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      needs.files-changed.outputs.documentation == 'true'
    needs: ["files-changed", "yaml-lint", "python-lint"]
    runs-on: "ubuntu-22.04"
    timeout-minutes: 5
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v5"
        with:
          submodules: true
      - name: Install NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: docs/package-lock.json
      - name: "Install dependencies"
        run: npm install
      - name: "Setup Python environment"
        run: "pip install invoke toml"
      - name: "Build docs website"
        run: "invoke docusaurus"

  validate-documentation-style:
    if: |
      always() && !cancelled() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')
    needs: ["files-changed", "yaml-lint", "python-lint"]
    runs-on: "ubuntu-22.04"
    timeout-minutes: 5
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v5"
        with:
          submodules: true

      # The official GitHub Action for Vale doesn't work, installing manually instead:
      # https://github.com/errata-ai/vale-action/issues/103
      - name: Download Vale
        run: |
          curl -sL "https://github.com/errata-ai/vale/releases/download/v${VALE_VERSION}/vale_${VALE_VERSION}_Linux_64-bit.tar.gz" -o vale.tar.gz
          tar -xzf vale.tar.gz
        env:
          VALE_VERSION: ${{ env.VALE_VERSION }}
      - name: "Validate documentation style"
        run: ./vale $(find ./docs -type f \( -name "*.mdx" -o -name "*.md" \) )
